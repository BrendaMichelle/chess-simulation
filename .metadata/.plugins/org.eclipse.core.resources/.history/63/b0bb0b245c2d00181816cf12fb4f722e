package chess;

/**
 * @author royjacome
 */
public class Rook extends Piece {
	
	public Rook(String player, String pieceName, int xCoordinate, int yCoordinate, BoardCell[][] chessBoard) {
		super(player, pieceName);
		this.piece_xCoordinate = xCoordinate;
		this.piece_yCoordinate = yCoordinate;
		
		incrementAttackPath(chessBoard);
		chessBoard[xCoordinate][yCoordinate].empty = false;
	}
	/* (non-Javadoc)
	 * @see chess.PieceAttribute#eating(chess.BoardCell[][], int, int)
	 */
	@Override
	public boolean eating(BoardCell[][] chessBoard, int new_xCoordinate, int new_yCoordinate) {
		
		Piece pieceToBeEaten = chessBoard[new_xCoordinate][new_yCoordinate].piece;
		String pieceOwner = pieceToBeEaten.getPlayer();
		String currentPlayer = getPlayer();
		
		if(!pieceOwner.equals(currentPlayer)) {
			pieceToBeEaten.decrementAttackPath(chessBoard);
			chessBoard[new_xCoordinate][new_yCoordinate].piece = null;
			return true;
		}
		else {
			// Can't eat your own piece
			System.out.println("Illegal move, try again");
		}
		
		return false;
	}

	/* (non-Javadoc)
	 * @see chess.PieceAttribute#moving(chess.BoardCell[][], int, int)
	 */
	@Override
	public boolean moving(Board board, int new_xCoordinate, int new_yCoordinate) {
		
		Rook rook = this;
		
		if(!checkValidMove(board.board, new_xCoordinate, new_yCoordinate)) {
			return false;
		}
		
		if(!board.board[new_xCoordinate][new_yCoordinate].empty) {
			if(eating(board.board, new_xCoordinate, new_yCoordinate)) {
				int originalX = rook.piece_xCoordinate;
				int originalY = rook.piece_yCoordinate;
				board.prepareUpdatingBoard(originalX, originalY, new_xCoordinate, new_yCoordinate); 
				rook.decrementAttackPath(board.board);
				board.board[originalX][originalY].empty = true;
				board.board[originalX][originalY].piece = null;
				rook.setMoved(true);
				board.board[new_xCoordinate][new_yCoordinate].empty = false;
				board.board[new_xCoordinate][new_yCoordinate].piece = rook;
				rook.piece_xCoordinate = new_xCoordinate;
				rook.piece_yCoordinate = new_yCoordinate;
				rook.incrementAttackPath(board.board);
				board.updateBoardAttackPaths(originalX, originalY, new_xCoordinate, new_yCoordinate); 
				return true;
			}
		}
		// If not then just move Rook
		else {
			int originalX = rook.piece_xCoordinate;
			int originalY = rook.piece_yCoordinate;
<<<<<<< HEAD
			board.prepareUpdatingBoard(originalX, originalY, new_xCoordinate, new_yCoordinate); 
			decrementAttackPath(board.board);
			board.board[originalX][originalY].empty = true;
			board.board[originalX][originalY].piece = null;
			rook.setMoved(true);
			board.board[new_xCoordinate][new_yCoordinate].empty = false;
			board.board[new_xCoordinate][new_yCoordinate].piece = rook;
			rook.piece_xCoordinate = new_xCoordinate;
			rook.piece_yCoordinate = new_yCoordinate;
			incrementAttackPath(board.board);
			board.updateBoardAttackPaths(originalX, originalY, new_xCoordinate, new_yCoordinate); 
=======
			Board.prepareUpdatingBoard(originalX, originalY, new_xCoordinate, new_yCoordinate);
			decrementAttackPath(chessBoard);
			chessBoard[originalX][originalY].empty = true;
			chessBoard[originalX][originalY].piece = null;
			rook.setMoved(true);
			chessBoard[new_xCoordinate][new_yCoordinate].empty = false;
			chessBoard[new_xCoordinate][new_yCoordinate].piece = rook;
			rook.piece_xCoordinate = new_xCoordinate;
			rook.piece_yCoordinate = new_yCoordinate;
			incrementAttackPath(chessBoard);
			Board.updateBoardAttackPaths(originalX, originalY, new_xCoordinate, new_yCoordinate);
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
			return true;
		}
		return false;
	}

	/* (non-Javadoc)
	 * @see chess.PieceAttribute#checkValidMove(int, int)
	 */
	@Override
	public boolean checkValidMove(BoardCell[][] chessBoard, int new_xCoordinate, int new_yCoordinate) {
		Rook rook = this;
		
		if(new_xCoordinate + new_yCoordinate > 16) {
			//System.out.println("Invalid move");
			return false;
		}
		
<<<<<<< HEAD
		if(rook.piece_xCoordinate == new_xCoordinate && rook.piece_yCoordinate == new_yCoordinate) {		// No movement
			System.out.println("Rook is in same position, invalid move");
			return false;
		}
		
		if(rook.piece_xCoordinate != new_xCoordinate && rook.piece_xCoordinate != new_yCoordinate) {		// Diagonal movement
			System.out.println("Rook's new position is not on the same x or y as its current position");
			return false;
		}
		
=======
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
		if(rook.piece_xCoordinate != new_xCoordinate && rook.piece_yCoordinate == new_yCoordinate) {
			return true;
		}
		
		if(rook.piece_xCoordinate == new_xCoordinate && rook.piece_yCoordinate != new_yCoordinate) {
			return true;
		}
		
<<<<<<< HEAD
=======
		System.out.println("Illegal move, try again");
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
		return false;
	}
	
	/* (non-Javadoc)
	 * @see chess.PieceAttribute#incrementAttackPath(BoardCell[][] chessBoard)
	 */
	@Override
	public void incrementAttackPath(BoardCell[][] chessBoard) {
		
		Rook rook = this;
		
		if(rook.getAttackPathVisible()) {
			return;
		}
		
		String currentPlayer = rook.getPlayer();
		
		if(currentPlayer.equals("white")) {									// Rook is a White Piece
			
			for(int rookX = rook.piece_xCoordinate - 1; rookX > -1 ; rookX--) {						// Check cells to left of Rook
				if(chessBoard[rookX][rook.piece_yCoordinate].empty == true) {
					chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rookX][rook.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rookX][rook.piece_yCoordinate].piece.getPlayer().equals("black")) {
							chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell++;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell++;
					break;
				}
			}
			
			for(int rookX = rook.piece_xCoordinate + 1 ; rookX < 8 ; rookX++) {						// Check cells to right of Rook
				if(chessBoard[rookX][rook.piece_yCoordinate].empty == true) {
					chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rookX][rook.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rookX][rook.piece_yCoordinate].piece.getPlayer().equals("black")) {
							chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell++;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell++;
					break;
				}
			}
			
			for(int rookY = rook.piece_yCoordinate + 1 ; rookY < 8 ; rookY++) {						// Check all cells above Rook
				if(chessBoard[rook.piece_xCoordinate][rookY].empty == true) {
					chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rook.piece_xCoordinate][rookY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rook.piece_xCoordinate][rookY].piece.getPlayer().equals("black")) {
							chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell++;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell++;
					break;
				}
			}
			
			for(int rookY = rook.piece_yCoordinate - 1 ; rookY > -1 ; rookY--) {						// Check all cells below Rook
				if(chessBoard[rook.piece_xCoordinate][rookY].empty == true) {
					chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rook.piece_xCoordinate][rookY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rook.piece_xCoordinate][rookY].piece.getPlayer().equals("black")) {
							chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell++;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell++;
					break;
				}
			}
			
			rook.setAttackPathVisible(true);
			return;
		}
		
		if(currentPlayer.equals("black")) {										// Rook is a Black piece
			
			for(int rookX = rook.piece_xCoordinate - 1; rookX > -1 ; rookX--) {						// Check cells to left of Rook
				if(chessBoard[rookX][rook.piece_yCoordinate].empty == true) {
					chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rookX][rook.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rookX][rook.piece_yCoordinate].piece.getPlayer().equals("white")) {
							chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell++;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell++;
					break;
				}
			}
			
			for(int rookX = rook.piece_xCoordinate + 1 ; rookX < 8 ; rookX++) {						// Check cells to right of Rook
				if(chessBoard[rookX][rook.piece_yCoordinate].empty == true) {
					chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rookX][rook.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rookX][rook.piece_yCoordinate].piece.getPlayer().equals("white")) {
							chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell++;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell++;
					break;
				}
			}
			
			for(int rookY = rook.piece_yCoordinate + 1 ; rookY < 8 ; rookY++) {						// Check all cells above Rook
				if(chessBoard[rook.piece_xCoordinate][rookY].empty == true) {
					chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rook.piece_xCoordinate][rookY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rook.piece_xCoordinate][rookY].piece.getPlayer().equals("white")) {
							chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell++;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell++;
					break;
				}
			}
			
			for(int rookY = rook.piece_yCoordinate - 1 ; rookY > -1 ; rookY--) {						// Check all cells below Rook
				if(chessBoard[rook.piece_xCoordinate][rookY].empty == true) {
					chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rook.piece_xCoordinate][rookY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rook.piece_xCoordinate][rookY].piece.getPlayer().equals("white")) {
							chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell++;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell++;
					break;
				}
			}
			
			rook.setAttackPathVisible(true);
			return;
		}
		
		System.out.println("Rook could not increment attack path");
		return;
	}
	
	/* (non-Javadoc)
	 * @see chess.PieceAttribute#decrementAttackPath(BoardCell[][] chessBoard)
	 */
	@Override
	public void decrementAttackPath(BoardCell[][] chessBoard) {
		
		Rook rook = this;
		
		if(!rook.getAttackPathVisible()) {
			return;
		}
		
		String currentPlayer = rook.getPlayer();
		
		if(currentPlayer.equals("white")) {									// Rook is a White Piece
			
			for(int rookX = rook.piece_xCoordinate - 1; rookX > -1 ; rookX--) {						// Check cells to left of Rook
				if(chessBoard[rookX][rook.piece_yCoordinate].empty == true) {
					chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rookX][rook.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rookX][rook.piece_yCoordinate].piece.getPlayer().equals("black")) {
							chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell--;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell--;
					break;
				}
			}
			
			for(int rookX = rook.piece_xCoordinate + 1 ; rookX < 8 ; rookX++) {						// Check cells to right of Rook
				if(chessBoard[rookX][rook.piece_yCoordinate].empty == true) {
					chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rookX][rook.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rookX][rook.piece_yCoordinate].piece.getPlayer().equals("black")) {
							chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell--;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rookX][rook.piece_yCoordinate].whiteAttackCell--;
					break;
				}
			}
			
			for(int rookY = rook.piece_yCoordinate + 1 ; rookY < 8 ; rookY++) {						// Check all cells above Rook
				if(chessBoard[rook.piece_xCoordinate][rookY].empty == true) {
					chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rook.piece_xCoordinate][rookY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rook.piece_xCoordinate][rookY].piece.getPlayer().equals("black")) {
							chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell--;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell--;
					break;
				}
			}
			
			for(int rookY = rook.piece_yCoordinate - 1 ; rookY > -1 ; rookY--) {						// Check all cells below Rook
				if(chessBoard[rook.piece_xCoordinate][rookY].empty == true) {
					chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell--;
				}
				else {
					chessBoard[rook.piece_xCoordinate][rookY].whiteAttackCell--;
					break;
				}
			}
			rook.setAttackPathVisible(false);
			return;
		}
		
		if(currentPlayer.equals("black")) {										// Rook is a Black piece
			
			for(int rookX = rook.piece_xCoordinate - 1; rookX > -1 ; rookX--) {						// Check cells to left of Rook
				if(chessBoard[rookX][rook.piece_yCoordinate].empty == true) {
					chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rookX][rook.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rookX][rook.piece_yCoordinate].piece.getPlayer().equals("white")) {
							chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell--;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell--;
					break;
				}
			}
			
			for(int rookX = rook.piece_xCoordinate + 1 ; rookX < 8 ; rookX++) {						// Check cells to right of Rook
				if(chessBoard[rookX][rook.piece_yCoordinate].empty == true) {
					chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rookX][rook.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rookX][rook.piece_yCoordinate].piece.getPlayer().equals("white")) {
							chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell--;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rookX][rook.piece_yCoordinate].blackAttackCell--;
					break;
				}
			}
			
			for(int rookY = rook.piece_yCoordinate + 1 ; rookY < 8 ; rookY++) {						// Check all cells above Rook
				if(chessBoard[rook.piece_xCoordinate][rookY].empty == true) {
					chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rook.piece_xCoordinate][rookY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rook.piece_xCoordinate][rookY].piece.getPlayer().equals("white")) {
							chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell--;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell--;
					break;
				}
			}
			
			for(int rookY = rook.piece_yCoordinate - 1 ; rookY > -1 ; rookY--) {						// Check all cells below Rook
				if(chessBoard[rook.piece_xCoordinate][rookY].empty == true) {
					chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[rook.piece_xCoordinate][rookY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[rook.piece_xCoordinate][rookY].piece.getPlayer().equals("white")) {
							chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell--;
							continue;
						}
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[rook.piece_xCoordinate][rookY].blackAttackCell--;
					break;
				}
			}
			rook.setAttackPathVisible(false);
			return;
		}
		
		System.out.println("Rook could not decrement Attack Path");
		return;
	}

}