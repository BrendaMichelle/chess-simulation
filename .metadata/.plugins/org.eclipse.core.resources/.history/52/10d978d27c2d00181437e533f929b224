package chess;
/**
*<h1>Board class: a chess board representation!</h1>
*
*<b>Details:</b>This class is the Board representation, which contains an array
*of BoardCells.  It contains methods to update paths, to initialize the board,
*to print the board, and a testing method used to print the attack paths.
*
*@author BrendaRios 
*@author royjacome
*@since   2018-02-23
*/
public class Board {
	BoardCell[][] board = new BoardCell [8][8]; 
	
	public void initialize_board() {
		for(int i = 0; i < board.length; i++){
            for(int j = 0; j < board.length; j++){
                board[i][j] = new BoardCell();
            }
        }
	}

	/* 
	 * This method sets up the initial chess board properly.
	 * When setting up board, it initialized the pieces in 
	 * the following order: Pawns, Bishop, Knights, Rooks, Kings, Queens
	 * 
	 * @return Nothing. 
	 */
	public void set_up_board() {
		//Piece a = new Piece (1, "bQ");
		
		// Pawns
		for (int i = 0; i < 8; i++) { 
			board[1][i].piece = new Pawn("black", "bp", 1, i, board); //black pawns
			board[6][i].piece = new Pawn("white", "wp", 6, i, board); //white pawns
		}
		/*board[6][0].piece = new Pawn("black", "bp", 6, 0, board); //black pawns
		board[1][6].piece = new Pawn("black", "bp", 1, 6, board); //black pawns
		board[2][6].piece = new Pawn("black", "bp", 2, 6, board); //black pawns
		board[3][6].piece = new Pawn("black", "bp", 3, 6, board); //black pawns
		board[4][6].piece = new Pawn("black", "bp", 4, 6, board); //black pawns
		board[5][6].piece = new Pawn("black", "bp", 5, 6, board); //black pawns
		board[6][6].piece = new Pawn("black", "bp", 6, 6, board); //black pawns
		board[7][6].piece = new Pawn("black", "bp", 7, 6, board); //black pawns
		
		board[0][1].piece = new Pawn("white", "wp", 0, 1, board); //white pawns
		board[1][1].piece = new Pawn("white", "wp", 1, 1, board); //white pawns
		board[2][1].piece = new Pawn("white", "wp", 2, 1, board); //white pawns
		board[3][1].piece = new Pawn("white", "wp", 3, 1, board); //white pawns
		board[4][1].piece = new Pawn("white", "wp", 4, 1, board); //white pawns
		board[5][1].piece = new Pawn("white", "wp", 5, 1, board); //white pawns
		board[6][1].piece = new Pawn("white", "wp", 6, 1, board); //white pawns
		board[7][1].piece = new Pawn("white", "wp", 7, 1, board); //white pawns
		*/
		//Knights
		board[0][1].piece = new Knight("black", "bN", 0, 1, board);
		board[0][6].piece = new Knight("black", "bN", 0, 6, board);
		board[7][6].piece = new Knight("white", "wN", 7, 6, board);
		board[7][1].piece = new Knight("white", "wN", 7, 1, board);
	
		
		// Bishops
		board[0][2].piece = new Bishop("black", "bB", 0, 2, board);
		board[0][5].piece = new Bishop("black", "bB", 0, 5, board);
		board[7][2].piece = new Bishop("white", "wB", 7, 2, board);
		board[7][5].piece = new Bishop("white", "wB", 7, 5, board);		
		
		//Rooks
		board[0][0].piece = new Rook("black", "bR", 0, 0, board);
		board[0][7].piece = new Rook("black", "bR", 0, 7, board);
		board[7][0].piece = new Rook("white", "wR", 7, 0, board);
		board[7][7].piece = new Rook("white", "wR", 7, 7, board);
		
		// Kings
		board[7][4].piece = new King ("white", "wK", 7, 4, board);
		board[0][4].piece = new King ("black", "bK", 0, 4, board);
		
		// Queens
		board[0][3].piece = new Queen("black", "bQ", 0, 3, board);
		board[7][3].piece = new Queen("white", "wQ", 7, 3, board);

		//((King)board[0][4].piece).moving(board, 0, 2);		// Castle black queen side
		//((King)board[0][4].piece).moving(board, 0, 6);		// Castle black king side
		//((King)board[7][4].piece).moving(board, 7, 6);		// Castle white king side (7,5, white bishop needs to be commented out)
		//((King)board[7][4].piece).moving(board, 7, 2);		// Castle white queen side (7,2 white bishop needs to be commented out)
		
	}
	
	/*public void printAttackPaths() {
		//printAttackPaths();
	}
	
	/*
	 * This method is used in testing to determine if
	 * attack paths are being updated correctly.
	 * 
	 * @return Nothing.  It just prints out
	 * the array of attack paths.
	 * 
	 */
	public void printAttackPaths() {
		for(int i = 0 ; i < board.length ; i++) {
			for(int j = 0 ; j < board.length ; j++) {
				System.out.print("w" + board[i][j].whiteAttackCell + "b" + board[i][j].blackAttackCell + " ");
			}
			System.out.println();
		}
		System.out.println();
	}*/
	
	
	/*
	 * This method is used to print the chess board
	 * according to the guidelines on the assignment 
	 * description.
	 * 
	 * @returns Nothing. This just print out a chess board representation.
	 */
	public void print_board() {
		int [] arr = {8, 7, 6, 5, 4, 3, 2, 1}; //the row numbers
		
		
		for(int i = 0; i < board.length; i++){
			for(int j = 0; j < board.length; j++){
                if(board[i][j].empty) { 
                		if(((i%2 == 0) && (j%2 == 0)) || ((i%2 != 0) && (j%2 != 0 )))  {
                			System.out.print("   ");
                		}
                	if(((i%2 == 0) && (j%2 != 0 )) || ((i%2 != 0) && (j%2 == 0 )) ) {
    					System.out.print("## ");
    				}
    			}
    				else if (board[i][j].empty == false ) {
    					System.out.print(board[i][j].piece.piece_name + " ");
    				}
            }
			System.out.println(" " + arr[i]);
        }
		System.out.println(" a  b  c  d  e  f  g  h"); //the column letters
	}
/*
 * This method decrements all attack Paths that a piece is in and its next position.
 * 	
 * @param pieceCurrentX The piece's current x value.
 * @param pieceCurrentY The piece's current y value.
 * @param pieceNextX The piece's desired X value.
 * @param piecenextY The piece's desired Y value.
 * @return Nothing.
 */
	
public void prepareUpdatingBoard(int pieceCurrentX, int pieceCurrentY, int pieceNextX, int pieceNextY) {		
		
		decrementCurrentPaths(pieceCurrentX, pieceCurrentY);
		decrementNextPaths(pieceNextX, pieceNextY);
	}

/*
 * This method updates the board's attack paths when a piece moves to a new position.
 * 	
 * @param piecePrevX The piece's previous x value.
 * @param piecePrevY The piece's previous y value.
 * @param pieceCurrentX The piece's current X value.
 * @param pieceCurrentY The piece's current Y value.
 * @return Nothing.
 */
	public void updateBoardAttackPaths(int piecePrevX, int piecePrevY, int pieceCurrentX, int pieceCurrentY) {		
		
		incrementPreviousPaths(piecePrevX, piecePrevY);
		incrementUpdatedPaths(pieceCurrentX, pieceCurrentY);
	}
	
/*
 * This method check whether or not the white king is in check.
 * 
 * @param chessBoard the chess board's cells
 * @param whtieKing The King whose position we're checking
 * @return boolean This returns true if it is indeed in check, false otherwise.
 */
	public boolean whiteKingInCheck(BoardCell[][] chessBoard, King whiteKing) {
		
		if(whiteKing.testWhiteKingCheck(chessBoard)) {
			return true;
		}
		
		return false;
	}
	
	/*
	 * This method check whether or not the black king is in check.
	 * 
	 * @param chessBoard the chess board's cells
	 * @param blackKing The King whose position we're checking
	 * @return boolean This returns true if it is indeed in check, false otherwise.
	 */
	public boolean blackKingInCheck(BoardCell[][] chessBoard, King blackKing) {
		
		if(blackKing.testBlackKingCheck(chessBoard)) {
			return true;
		}
		
		return false;
	}
	
	/*
	 * This method check whether or not the white king is check mated.
	 * 
	 * @param chessBoard the chess board's cells
	 * @param whtieKing The King whose position we're checking
	 * @return boolean This returns true if it is indeed check mated, false otherwise.
	 */
	public boolean checkMateWhiteKing(BoardCell[][] chessBoard, King whiteKing) {
		
		if(whiteKing.testCheckMateWhiteKing(chessBoard)) {
			return true;
		}
		
		return false;
	}
	
	/*
	 * This method check whether or not the white king is check mated.
	 * 
	 * @param chessBoard the chess board's cells
	 * @param blackeKing The King whose position we're checking
	 * @return boolean This returns true if it is indeed check mated, false otherwise.
	 */
	public boolean checkMateBlackKing(BoardCell[][] chessBoard, King blackKing) {
		
		if(blackKing.testCheckMateBlackKing(chessBoard)) {
			return true;
		}
		
		return false;
	}
	

	/*
	 * This method does decrements to a piece's paths.
	 * 
	 * @param currentX The piece's current x position.
	 * @param currentY The piece's current y position.
	 * @return Nothing.
	 */
	public  void decrementCurrentPaths(int currentX, int currentY) {
		
		Piece piece = null;
		
		int decrementCurrentX = currentX;
		int decrementCurrentY = currentY;
		
		decrementCurrentX--;
		
		while(decrementCurrentX > -1) {					// Check all cells to the left of piece
			
			if(!board[decrementCurrentX][currentY].empty) {
				piece = board[decrementCurrentX][currentY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementCurrentX--;
		}
		
		piece = null;
		decrementCurrentX = currentX;
		decrementCurrentX++;
		
		while(decrementCurrentX < 8) {					// Check all cells to the right of the piece
			
			if(!board[decrementCurrentX][currentY].empty) {
				piece = board[decrementCurrentX][currentY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementCurrentX++;
		}
		
		piece = null;
		decrementCurrentX = currentX;
		decrementCurrentY--;
		
		while(decrementCurrentY > -1) {					// Check all cells below the piece
			
			if(!board[currentX][decrementCurrentY].empty) {
				piece = board[currentX][decrementCurrentY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementCurrentY--;
		}
		
		piece = null;
		decrementCurrentY = currentY;
		decrementCurrentY++;
		
		while(decrementCurrentY < 8) {					// Check all above the piece
			
			if(!board[currentX][decrementCurrentY].empty) {
				piece = board[currentX][decrementCurrentY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementCurrentY++;
		}
		
		piece = null;
		decrementCurrentY = currentY;
		decrementCurrentX--;
		decrementCurrentY++;
		
		while(decrementCurrentX > -1 && decrementCurrentY < 8) {		// Check all cells top left of piece
			
			if(!board[decrementCurrentX][decrementCurrentY].empty) {
				piece = board[decrementCurrentX][decrementCurrentY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementCurrentX--;
			decrementCurrentY++;
		}
		
		piece = null;
		decrementCurrentX = currentX;
		decrementCurrentY = currentY;
		decrementCurrentX++;
		decrementCurrentY++;
		
		while(decrementCurrentX < 8 && decrementCurrentY < 8) {		// Check all cells top right of piece
			
			if(!board[decrementCurrentX][decrementCurrentY].empty) {
				piece = board[decrementCurrentX][decrementCurrentY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			
			decrementCurrentX++;
			decrementCurrentY++;
		}
		
		piece = null;
		decrementCurrentX = currentX;
		decrementCurrentY = currentY;
		decrementCurrentX++;
		decrementCurrentY--;
		
		while(decrementCurrentX < 8 && decrementCurrentY > -1) {		// Check all cells bottom right of piece
			
			if(!board[decrementCurrentX][decrementCurrentY].empty) {
				piece = board[decrementCurrentX][decrementCurrentY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			
			decrementCurrentX++;
			decrementCurrentY--;
		}
		
		piece = null;
		decrementCurrentX = currentX;
		decrementCurrentY = currentY;
		decrementCurrentX--;
		decrementCurrentY--;
		
		while(decrementCurrentX > -1 && decrementCurrentY > -1) {	// Check all cells bottom left of piece
			
			if(!board[decrementCurrentX][decrementCurrentY].empty) {
				piece = board[decrementCurrentX][decrementCurrentY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			
			decrementCurrentX--;
			decrementCurrentY--;
		}
	}
	
	/*
	 * This method does decrements to a piece's coming paths.
	 * 
	 * @param nextX The piece's next x position.
	 * @param nextY The piece's next y position.
	 * @return Nothing.
	 */
	public  void decrementNextPaths(int nextX, int nextY) {
		Piece piece = null;
		
		int decrementNextX = nextX;
		int decrementNextY = nextY;
		
		decrementNextX--;
		
		while(decrementNextX > -1) {					// Check all cells to the left of piece
			
			if(!board[decrementNextY][nextY].empty) {
				piece = board[decrementNextY][nextY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementNextX--;
		}
		
		piece = null;
		decrementNextX = nextX;
		decrementNextX++;
		
		while(decrementNextX < 8) {					// Check all cells to the right of the piece
			
			if(!board[decrementNextY][nextY].empty) {
				piece = board[decrementNextY][nextY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementNextX++;
		}
		
		piece = null;
		decrementNextX = nextX;
		decrementNextY--;
		
		while(decrementNextY > -1) {					// Check all cells below the piece
			
			if(!board[nextX][decrementNextY].empty) {
				piece = board[nextX][decrementNextY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementNextY--;
		}
		
		piece = null;
		decrementNextY = nextY;
		decrementNextY++;
		
		while(decrementNextY < 8) {					// Check all above the piece
			
			if(!board[nextX][decrementNextY].empty) {
				piece = board[nextX][decrementNextY].piece;
				piece.decrementAttackPath(board);
				break;
			}
		
			decrementNextY++;
		}
		
		piece = null;
		decrementNextY = nextY;
		decrementNextX--;
		decrementNextY++;
		
		while(decrementNextX > -1 && decrementNextY < 8) {		// Check all cells top left of piece
			
			if(!board[decrementNextX][decrementNextY].empty) {
				piece = board[decrementNextX][decrementNextY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementNextX--;
			decrementNextY++;
		}
		
		piece = null;
		decrementNextX = nextX;
		decrementNextY = nextY;
		decrementNextX++;
		decrementNextY++;
		
		while(decrementNextX < 8 && decrementNextY < 8) {		// Check all cells top right of piece
			
			if(!board[decrementNextX][decrementNextY].empty) {
				piece = board[decrementNextX][decrementNextY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementNextX++;
			decrementNextY++;
		}
		
		piece = null;
		decrementNextX = nextX;
		decrementNextY = nextY;
		decrementNextX++;
		decrementNextY--;
		
		while(decrementNextX < 8 && decrementNextY > -1) {		// Check all cells bottom right of piece
			
			if(!board[decrementNextX][decrementNextY].empty) {
				piece = board[decrementNextX][decrementNextY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementNextX++;
			decrementNextY--;
		}
		
		piece = null;
		decrementNextX = nextX;
		decrementNextY = nextY;
		decrementNextX--;
		decrementNextY--;
		
		while(decrementNextX > -1 && decrementNextY > -1) {	// Check all cells bottom left of piece
			
			if(!board[decrementNextX][decrementNextY].empty) {
				piece = board[decrementNextX][decrementNextY].piece;
				piece.decrementAttackPath(board);
				break;
			}
			
			decrementNextX--;
			decrementNextY--;
		}
	}
	
	/*
	 * This method does increments to a piece's previous  paths.
	 * 
	 * @param prevX The piece's previous x position.
	 * @param prevY The piece's previous y position.
	 * @return Nothing.
	 */
	public  void incrementPreviousPaths(int prevX, int prevY) {
		Piece piece = null;
		
		int incrementPrevX = prevX;
		int incrementPrevY = prevY;
		
		incrementPrevX--;
		
		while(incrementPrevX > -1) {					// Check all cells to the left of piece
			
			if(!board[incrementPrevX][prevY].empty) {
				piece = board[incrementPrevX][prevY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementPrevX--;
		}
		
		piece = null;
		incrementPrevX = prevX;
		incrementPrevX++;
		
		while(incrementPrevX < 8) {					// Check all cells to the right of the piece
			
			if(!board[incrementPrevX][prevY].empty) {
				piece = board[incrementPrevX][prevY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementPrevX++;
		}
		
		piece = null;
		incrementPrevX = prevX;
		incrementPrevY--;
		
		while(incrementPrevY > -1) {					// Check all cells below the piece
			
			if(!board[prevX][incrementPrevY].empty) {
				piece = board[prevX][incrementPrevY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementPrevY--;
		}
		
		piece = null;
		incrementPrevY = prevY;
		incrementPrevY++;
		
		while(incrementPrevY < 8) {					// Check all below the piece
			
			if(!board[prevX][incrementPrevY].empty) {
				piece = board[prevX][incrementPrevY].piece;
				piece.incrementAttackPath(board);
				break;
			}
		
			incrementPrevY++;
		}
		
		piece = null;
		incrementPrevY = prevY;
		incrementPrevX--;
		incrementPrevY++;
		
		while(incrementPrevX > -1 && incrementPrevY < 8) {		// Check all cells top left of piece
			
			if(!board[incrementPrevX][incrementPrevY].empty) {
				piece = board[incrementPrevX][incrementPrevY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementPrevX--;
			incrementPrevY++;
		}
		
		piece = null;
		incrementPrevX = prevX;
		incrementPrevY = prevY;
		incrementPrevX++;
		incrementPrevY++;
		
		while(incrementPrevX < 8 && incrementPrevY < 8) {		// Check all cells top right of piece
			
			if(!board[incrementPrevX][incrementPrevY].empty) {
				piece = board[incrementPrevX][incrementPrevY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementPrevX++;
			incrementPrevY++;
		}
		
		piece = null;
		incrementPrevX = prevX;
		incrementPrevY = prevY;
		incrementPrevX++;
		incrementPrevY--;
		
		while(incrementPrevX < 8 && incrementPrevY > -1) {		// Check all cells bottom right of piece
			
			if(!board[incrementPrevX][incrementPrevY].empty) {
				piece = board[incrementPrevX][incrementPrevY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementPrevX++;
			incrementPrevY--;
		}
		
		piece = null;
		incrementPrevX = prevX;
		incrementPrevY = prevY;
		incrementPrevX--;
		incrementPrevY--;
		
		while(incrementPrevX > -1 && incrementPrevY > -1) {	// Check all cells bottom left of piece
			
			if(!board[incrementPrevX][incrementPrevY].empty) {
				piece = board[incrementPrevX][incrementPrevY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementPrevX--;
			incrementPrevY--;
		}
	}
	
	/*
	 * This method does increments to a piece's new paths.
	 * 
	 * @param newX The piece's new x position.
	 * @param newY The piece's new y position.
	 * @return Nothing.
	 */
	public void incrementUpdatedPaths(int newX, int newY) {

		Piece piece = null;
		
		int incrementNewX = newX;
		int incrementNewY = newY;
		
		incrementNewX--;
		
		while(incrementNewX > -1) {					// Check all cells to the left of piece
			
			if(!board[incrementNewX][newY].empty) {
				piece = board[incrementNewX][newY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementNewX--;
		}
		
		piece = null;
		incrementNewX = newX;
		incrementNewX++;
		
		while(incrementNewX < 8) {					// Check all cells to the right of the piece
			
			if(!board[incrementNewX][newY].empty) {
				piece = board[incrementNewX][newY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementNewX++;
		}
		
		piece = null;
		incrementNewX = newX;
		incrementNewY--;
		
		while(incrementNewY > -1) {					// Check all cells below the piece
			
			if(!board[newX][incrementNewY].empty) {
				piece = board[newX][incrementNewY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementNewY--;
		}
		
		piece = null;
		incrementNewY = newY;
		incrementNewY++;
		
		while(incrementNewY < 8) {					// Check all above the piece
			
			if(!board[newX][incrementNewY].empty) {
				piece = board[newX][incrementNewY].piece;
				piece.incrementAttackPath(board);
				break;
			}
		
			incrementNewY++;
		}
		
		piece = null;
		incrementNewY = newY;
		incrementNewX--;
		incrementNewY++;
		
		while(incrementNewX > -1 && incrementNewY < 8) {		// Check all cells top left of piece
			
			if(!board[newX][incrementNewY].empty) {
				piece = board[newX][incrementNewY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementNewX--;
			incrementNewY++;
		}
		
		piece = null;
		incrementNewX = newX;
		incrementNewY = newY;
		incrementNewX++;
		incrementNewY++;
		
		while(incrementNewX < 8 && incrementNewY < 8) {		// Check all cells top right of piece
			
			if(!board[newX][incrementNewY].empty) {
				piece = board[newX][incrementNewY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementNewX++;
			incrementNewY++;
		}
		
		piece = null;
		incrementNewX = newX;
		incrementNewY = newY;
		incrementNewX++;
		incrementNewY--;
		
		while(incrementNewX < 8 && incrementNewY > -1) {		// Check all cells bottom right of piece
			
			if(!board[newX][incrementNewY].empty) {
				piece = board[newX][incrementNewY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementNewX++;
			incrementNewY--;
		}
		
		piece = null;
		incrementNewX = newX;
		incrementNewY = newY;
		incrementNewX--;
		incrementNewY--;
		
		while(incrementNewX > -1 && incrementNewY > -1) {	// Check all cells bottom left of piece
			
			if(!board[newX][incrementNewY].empty) {
				piece = board[newX][incrementNewY].piece;
				piece.incrementAttackPath(board);
				break;
			}
			
			incrementNewX--;
			incrementNewY--;
		}
	}
	
}
