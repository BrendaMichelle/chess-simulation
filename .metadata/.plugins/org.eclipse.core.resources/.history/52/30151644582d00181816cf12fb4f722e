<<<<<<< HEAD
package chess;

public class Bishop extends Piece {
=======
/**
 * 
 */
package chess;

/**
 * @author royjacome
 *
 */
public class Bishop extends Piece  {
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1

	/**
	 * @param player
	 * @param moved
	 */
	public Bishop(String player, String pieceName, int xCoordinate, int yCoordinate, BoardCell[][] chessBoard) {
		super(player, pieceName);
		this.piece_xCoordinate = xCoordinate;
		this.piece_yCoordinate = yCoordinate;
		
		incrementAttackPath(chessBoard);
		chessBoard[xCoordinate][yCoordinate].empty = false;
	}

	/* (non-Javadoc)
	 * @see chess.PieceAttribute#eating(chess.BoardCell[][], int, int)
	 */
	@Override
	public boolean eating(BoardCell[][] chessBoard, int new_xCoordinate, int new_yCoordinate) {
		Piece pieceToBeEaten = chessBoard[new_xCoordinate][new_yCoordinate].piece;
		String pieceOwner = pieceToBeEaten.getPlayer();
		String currentPlayer = getPlayer();
		
		if(!pieceOwner.equals(currentPlayer)) {
<<<<<<< HEAD
			//uncomment this Board.decrementPieceAttackPaths(pieceToBeEaten);
=======
			pieceToBeEaten.decrementAttackPath(chessBoard);
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
			chessBoard[new_xCoordinate][new_yCoordinate].piece = null;
			return true;
		}
		else {
<<<<<<< HEAD
			System.out.println("Cannot eat your own piece");
=======
			// Can't eat your own piece
			System.out.println("Illegal move, try again");
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
		}
		
		return false;
	}

	/* (non-Javadoc)
	 * @see chess.PieceAttribute#moving(chess.BoardCell[][], int, int)
	 */
	@Override
<<<<<<< HEAD
	public boolean moving(Board board, int new_xCoordinate, int new_yCoordinate) {
		
		Bishop bishop = this;
		
		if(!checkValidMove(board.board, new_xCoordinate, new_yCoordinate)) {
			return false;
		}
		
		if(!board.board[new_xCoordinate][new_yCoordinate].empty) {
			if(eating(board.board, new_xCoordinate, new_yCoordinate)) {
				int originalX = bishop.piece_xCoordinate;
				int originalY = bishop.piece_yCoordinate;
				board.prepareUpdatingBoard(originalX, originalY, new_xCoordinate, new_yCoordinate);
				bishop.decrementAttackPath(board.board);
				board.board[originalX][originalY].empty = true;
				board.board[originalX][originalY].piece = null;
				bishop.setMoved(true);
				board.board[new_xCoordinate][new_yCoordinate].empty = false;
				board.board[new_xCoordinate][new_yCoordinate].piece = bishop;
				bishop.piece_xCoordinate = new_xCoordinate;
				bishop.piece_yCoordinate = new_yCoordinate;
				bishop.incrementAttackPath(board.board);
				board.updateBoardAttackPaths(originalX, originalY, new_xCoordinate, new_yCoordinate);
=======
	public boolean moving(BoardCell[][] chessBoard, int new_xCoordinate, int new_yCoordinate) {
		
		Bishop bishop = this;
		
		if(!checkValidMove(chessBoard, new_xCoordinate, new_yCoordinate)) {
			return false;
		}
		
		if(!chessBoard[new_xCoordinate][new_yCoordinate].empty) {
			if(eating(chessBoard, new_xCoordinate, new_yCoordinate)) {
				int originalX = bishop.piece_xCoordinate;
				int originalY = bishop.piece_yCoordinate;
				Board.prepareUpdatingBoard(originalX, originalY, new_xCoordinate, new_yCoordinate);
				bishop.decrementAttackPath(chessBoard);
				chessBoard[originalX][originalY].empty = true;
				chessBoard[originalX][originalY].piece = null;
				bishop.setMoved(true);
				chessBoard[new_xCoordinate][new_yCoordinate].empty = false;
				chessBoard[new_xCoordinate][new_yCoordinate].piece = bishop;
				bishop.piece_xCoordinate = new_xCoordinate;
				bishop.piece_yCoordinate = new_yCoordinate;
				bishop.incrementAttackPath(chessBoard);
				Board.updateBoardAttackPaths(originalX, originalY, new_xCoordinate, new_yCoordinate);
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
				return true;
			}
		}
		// Else just move Bishop
		else {
			int originalX = bishop.piece_xCoordinate;
			int originalY = bishop.piece_yCoordinate;
<<<<<<< HEAD
			board.prepareUpdatingBoard(originalX, originalY, new_xCoordinate, new_yCoordinate);
			bishop.decrementAttackPath(board.board);
			board.board[originalX][originalY].empty = true;
			board.board[originalX][originalY].piece = null;
			bishop.setMoved(true);
			board.board[new_xCoordinate][new_yCoordinate].empty = false;
			board.board[new_xCoordinate][new_yCoordinate].piece = bishop;
			bishop.piece_xCoordinate = new_xCoordinate;
			bishop.piece_yCoordinate = new_yCoordinate;
			bishop.incrementAttackPath(board.board);
			board.updateBoardAttackPaths(originalX, originalY, new_xCoordinate, new_yCoordinate);
=======
			Board.prepareUpdatingBoard(originalX, originalY, new_xCoordinate, new_yCoordinate);
			bishop.decrementAttackPath(chessBoard);
			chessBoard[originalX][originalY].empty = true;
			chessBoard[originalX][originalY].piece = null;
			bishop.setMoved(true);
			chessBoard[new_xCoordinate][new_yCoordinate].empty = false;
			chessBoard[new_xCoordinate][new_yCoordinate].piece = bishop;
			bishop.piece_xCoordinate = new_xCoordinate;
			bishop.piece_yCoordinate = new_yCoordinate;
			bishop.incrementAttackPath(chessBoard);
			Board.updateBoardAttackPaths(originalX, originalY, new_xCoordinate, new_yCoordinate);
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
			return true;
		}
		
		return false;
	}

	/* (non-Javadoc)
	 * @see chess.PieceAttribute#checkValidMove(int, int)
	 */
	@Override
	public boolean checkValidMove(BoardCell[][] chessBoard, int new_xCoordinate, int new_yCoordinate) {
		
		Bishop bishop = this;
		
		if(new_xCoordinate + new_yCoordinate > 16) {
<<<<<<< HEAD
			//System.out.println("Invalid move");
			return false;
		}
		
		if(bishop.piece_xCoordinate == new_xCoordinate || bishop.piece_yCoordinate == new_yCoordinate) {		// No movement or not diagonal move
			System.out.println("Invalid move");
			return false;
		}
=======
			System.out.println("Illegal move, try again");
			return false;
		}
		
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
		
		if(Math.abs((new_yCoordinate - bishop.piece_yCoordinate) / (new_xCoordinate - bishop.piece_xCoordinate)) == 1) {		// Valid move
			return true;
		}
		
<<<<<<< HEAD
=======
		System.out.println("Illegal move, try again");
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
		return false;
	}

	/* (non-Javadoc)
	 * @see chess.PieceAttribute#incrementAttackPath(chess.BoardCell[][])
	 */
	@Override
	public void incrementAttackPath(BoardCell[][] chessBoard) {
		
		Bishop bishop = this;
		
		if(bishop.getAttackPathVisible()) {
			return;
		}
		
		String currentPlayer = bishop.getPlayer();
		
		if(currentPlayer.equals("white")) {					// Bishop is a White Piece
			
			for(int xCell = bishop.piece_xCoordinate - 1,  yCell = bishop.piece_yCoordinate + 1 ; xCell > -1 && yCell < 8 ; xCell--, yCell++) {	// Check cells top left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell++;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].whiteAttackCell++;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate + 1, yCell = bishop.piece_yCoordinate + 1 ; xCell < 8 && yCell < 8 ; xCell++, yCell++) {		// Check cells top right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell++;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].whiteAttackCell++;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate + 1, yCell = bishop.piece_yCoordinate - 1 ; xCell < 8 && yCell > -1 ; xCell++, yCell--) {		// Check cells bottom right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell++;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].whiteAttackCell++;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate - 1 , yCell = bishop.piece_yCoordinate - 1 ; xCell > -1 && yCell > -1 ; xCell--, yCell--) {	// Check cells bottom left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell++;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].whiteAttackCell++;
					break;
				}
			}
			
			bishop.setAttackPathVisible(true);
			return;
		}
		
		if(currentPlayer.equals("black")) {					// Bishop is a Black Piece
			
			for(int xCell = bishop.piece_xCoordinate - 1,  yCell = bishop.piece_yCoordinate + 1 ; xCell > -1 && yCell < 8 ; xCell--, yCell++) {	// Check cells top left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell++;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].blackAttackCell++;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate + 1, yCell = bishop.piece_yCoordinate + 1 ; xCell < 8 && yCell < 8 ; xCell++, yCell++) {		// Check cells top right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell++;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].blackAttackCell++;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate + 1, yCell = bishop.piece_yCoordinate - 1 ; xCell < 8 && yCell > -1 ; xCell++, yCell--) {		// Check cells bottom right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell++;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].blackAttackCell++;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate - 1 , yCell = bishop.piece_yCoordinate - 1 ; xCell > -1 && yCell > -1 ; xCell--, yCell--) {	// Check cells bottom left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell++;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell++;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].blackAttackCell++;
					break;
				}
			}
			
			bishop.setAttackPathVisible(true);
			return;
		}

	}

	/* (non-Javadoc)
	 * @see chess.PieceAttribute#decrementAttackPath(chess.BoardCell[][])
	 */
	@Override
	public void decrementAttackPath(BoardCell[][] chessBoard) {
		
		Bishop bishop = this;
		
		if(!bishop.getAttackPathVisible()) {
			return;
		}
		
		String currentPlayer = bishop.getPlayer();
		
		if(currentPlayer.equals("white")) {					// Bishop is a White Piece
			
			for(int xCell = bishop.piece_xCoordinate - 1,  yCell = bishop.piece_yCoordinate + 1 ; xCell > -1 && yCell < 8 ; xCell--, yCell++) {	// Check cells top left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell--;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].whiteAttackCell--;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate + 1, yCell = bishop.piece_yCoordinate + 1 ; xCell < 8 && yCell < 8 ; xCell++, yCell++) {		// Check cells top right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell--;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].whiteAttackCell--;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate + 1, yCell = bishop.piece_yCoordinate - 1 ; xCell < 8 && yCell > -1 ; xCell++, yCell--) {		// Check cells bottom right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell--;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].whiteAttackCell--;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate - 1 , yCell = bishop.piece_yCoordinate - 1 ; xCell > -1 && yCell > -1 ; xCell--, yCell--) {	// Check cells bottom left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell--;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].whiteAttackCell--;
					break;
				}
			}
			
			bishop.setAttackPathVisible(false);
			return;
		}
		
		if(currentPlayer.equals("black")) {					// Bishop is a Black Piece
			
			for(int xCell = bishop.piece_xCoordinate - 1,  yCell = bishop.piece_yCoordinate + 1 ; xCell > -1 && yCell < 8 ; xCell--, yCell++) {	// Check cells top left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell--;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].blackAttackCell--;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate + 1, yCell = bishop.piece_yCoordinate + 1 ; xCell < 8 && yCell < 8 ; xCell++, yCell++) {		// Check cells top right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell--;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].blackAttackCell--;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate + 1, yCell = bishop.piece_yCoordinate - 1 ; xCell < 8 && yCell > -1 ; xCell++, yCell--) {		// Check cells bottom right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell--;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].blackAttackCell--;
					break;
				}
			}
			
			for(int xCell = bishop.piece_xCoordinate - 1 , yCell = bishop.piece_yCoordinate - 1 ; xCell > -1 && yCell > -1 ; xCell--, yCell--) {	// Check cells bottom left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell--;
				}
				else {
<<<<<<< HEAD
=======
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell--;
						continue;
					}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
					chessBoard[xCell][yCell].blackAttackCell--;
					break;
				}
			}
			
			bishop.setAttackPathVisible(false);
			return;
		}

	}

<<<<<<< HEAD
}
=======
}
>>>>>>> cb012a287278fadf2427316223f2cf0b8dd6fdf1
