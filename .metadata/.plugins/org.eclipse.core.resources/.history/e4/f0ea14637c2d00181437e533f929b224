package chess;

public class Queen extends Piece {
	//String whiteRep = "wQ";
	//String blackRep = "bQ";
	
	/*public Queen(String player, String piece ) {
		super(player, piece);
	}*/
	public Queen(String player, String pieceName, int xCoordinate, int yCoordinate, BoardCell[][] chessBoard) {
		super(player, pieceName);
		this.piece_xCoordinate = xCoordinate;
		this.piece_yCoordinate = yCoordinate;
		
		incrementAttackPath(chessBoard);
		chessBoard[xCoordinate][yCoordinate].empty = false;
	}

	@Override
	public boolean eating(BoardCell[][] chessBoard, int new_x, int new_y) {
		Piece pieceToBeEaten = chessBoard[new_x][new_y].piece;
		String pieceOwner = pieceToBeEaten.getPlayer();
		String currentPlayer = getPlayer();
		
		if(!pieceOwner.equals(currentPlayer)) {
			pieceToBeEaten.decrementAttackPath(chessBoard);
			chessBoard[new_x][new_y].piece = null;
			return true;
		}
		else {
			// Can't eat your own piece
		}
		
		return false;
	}

	@Override
	public boolean moving(Board board, int new_xCoordinate, int new_yCoordinate) {
		Queen queen = this;
		
		if(!checkValidMove(board.board, new_xCoordinate, new_yCoordinate)) {
			return false;
		}
		
		if(!board.board[new_xCoordinate][new_yCoordinate].empty) {
			if(eating(board.board, new_xCoordinate, new_yCoordinate)) {
				int originalX = rook.piece_xCoordinate;
				int originalY = rook.piece_yCoordinate;
				board.prepareUpdatingBoard(originalX, originalY, new_xCoordinate, new_yCoordinate); 
				rook.decrementAttackPath(board.board);
				board.board[originalX][originalY].empty = true;
				board.board[originalX][originalY].piece = null;
				rook.setMoved(true);
				board.board[new_xCoordinate][new_yCoordinate].empty = false;
				board.board[new_xCoordinate][new_yCoordinate].piece = rook;
				rook.piece_xCoordinate = new_xCoordinate;
				rook.piece_yCoordinate = new_yCoordinate;
				rook.incrementAttackPath(board.board);
				board.updateBoardAttackPaths(originalX, originalY, new_xCoordinate, new_yCoordinate); 
				return true;
			}
		}
		// If not then just move Rook
		else {
			int originalX = rook.piece_xCoordinate;
			int originalY = rook.piece_yCoordinate;
			board.prepareUpdatingBoard(originalX, originalY, new_xCoordinate, new_yCoordinate); 
			decrementAttackPath(board.board);
			board.board[originalX][originalY].empty = true;
			board.board[originalX][originalY].piece = null;
			rook.setMoved(true);
			board.board[new_xCoordinate][new_yCoordinate].empty = false;
			board.board[new_xCoordinate][new_yCoordinate].piece = rook;
			rook.piece_xCoordinate = new_xCoordinate;
			rook.piece_yCoordinate = new_yCoordinate;
			incrementAttackPath(board.board);
			board.updateBoardAttackPaths(originalX, originalY, new_xCoordinate, new_yCoordinate); 

			return true;
		}
		return false;
	}

	@Override
	public boolean checkValidMove(BoardCell[][] chessBoard, int new_x, int new_y) {
		
		Queen queen = this;
		int queenX = queen.piece_xCoordinate;
		int queenY = queen.piece_yCoordinate;
		
		boolean 
		decreasedX = false,
		increasedX = false,
		decreasedY = false,
		increasedY = false;
		
		boolean bottomLeft = false;
		boolean topLeft = false;
		boolean topRight = false;
		boolean bottomRight = false;
		
		if(queenX - new_x > 0 && queenY == new_y) {
			decreasedX = true;
		}
		else {
			increasedX = true;
		}
		
		if(queenY - new_y > 0 && queenX == new_x) {
			decreasedY = true;
		}
		else {
			increasedY = true;
		}
		
		if(new_x + new_y > 16) {
			//System.out.println("Invalid move");
			return false;
		}
		
		if(queenX - new_x > 0 && queenY - new_y > 0) {
			bottomLeft = true;
		}
		else if(queenX - new_x > 0 && queenY - new_y < 0) {
			topLeft = true;
		}
		else if(queenX - new_x < 0 && queenY - new_y < 0) {
			topRight = true;
		}
		else if(queenX - new_x < 0 && queenY - new_y > 0) {
			bottomRight = true;
		}
		
		if(Math.abs((new_y - queen.piece_yCoordinate) / (new_x - queen.piece_xCoordinate)) == 1) {		// Valid move
			
			if(bottomLeft) {
				for(int xCell = queenX - 1, yCell = queenY - 1 ; xCell > new_x && yCell > new_y ; xCell--, yCell--) {
					if(!chessBoard[xCell][yCell].empty) {
						return false;
					}
				}
				return true;
			}
			if(topLeft) {
				for(int xCell = queenX - 1 , yCell = queenY + 1 ; xCell > new_x && yCell < new_y ; xCell--, yCell++) {
					if(!chessBoard[xCell][yCell].empty) {
						return false;
					}
				}
				return true;
			}
			if(topRight) {
				for(int xCell = queenX + 1 , yCell = queenY + 1 ; xCell < new_x && yCell < new_y ; xCell++, yCell++) {
					if(!chessBoard[xCell][yCell].empty) {
						return false;
					}
				}
				return true;
			}
			if(bottomRight) {
				for(int xCell = queenX + 1 , yCell = queenY - 1 ; xCell < new_x && yCell > new_y ; xCell++, yCell--) {
					if(!chessBoard[xCell][yCell].empty) {
						return false;
					}
				}
				return true;
			}
			
			return false;
		}
		
		
		if(queen.piece_xCoordinate != new_x && queen.piece_yCoordinate == new_y) {	// Move horizontally
			
			if(decreasedX) {		// Going left of board
				for(int xCell = queenX - 1, yCell = queenY ; xCell > new_x ; xCell--) {	// check no piece is in the way
					if(!chessBoard[xCell][yCell].empty) {
						return false;
					}
				}
				return true;
			}
			else if(increasedX) {	// Going right of board
				for(int xCell = queenX + 1, yCell = queenY ; queenX < new_x ; xCell++) {		// Check no piece is in the way
					if(!chessBoard[xCell][yCell].empty) {
						return false;
					}
				}
				return true;
			}
		}
		
		if(queen.piece_xCoordinate == new_x && queen.piece_yCoordinate != new_y) {
			
			if(decreasedY) {		// Going down the Board
				for(int xCell = queenX, yCell = queenY - 1; yCell > new_y ; yCell--) {
					if(!chessBoard[xCell][yCell].empty) {
						return false;
					}
				}
				return true;
			}
			else if(increasedY) {	// Going up the board
				for(int xCell = queenX, yCell = queenY + 1; yCell > new_y ; yCell++) {
					if(!chessBoard[xCell][yCell].empty) {
						return false;
					}
				}
				return true;
			}
			return true;
		}
		return false;
	}

	@Override
	public void incrementAttackPath(BoardCell[][] chessBoard) {
		
		Queen queen = this;
		
		if(queen.getAttackPathVisible()) {
			return;
		}
		
		String currentPlayer = queen.getPlayer();
		
		if(currentPlayer.equals("white")) {									// Rook is a White Piece
			
			for(int xCell = queen.piece_xCoordinate - 1,  yCell = queen.piece_yCoordinate + 1 ; xCell > -1 && yCell < 8 ; xCell--, yCell++) {	// Check cells top left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell++;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell++;
						continue;
					}
					chessBoard[xCell][yCell].whiteAttackCell++;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate + 1, yCell = queen.piece_yCoordinate + 1 ; xCell < 8 && yCell < 8 ; xCell++, yCell++) {		// Check cells top right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell++;
				}
				else {

					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell++;
						continue;
					}
					chessBoard[xCell][yCell].whiteAttackCell++;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate + 1, yCell = queen.piece_yCoordinate - 1 ; xCell < 8 && yCell > -1 ; xCell++, yCell--) {		// Check cells bottom right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell++;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell++;
						continue;
					}
					chessBoard[xCell][yCell].whiteAttackCell++;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate - 1 , yCell = queen.piece_yCoordinate - 1 ; xCell > -1 && yCell > -1 ; xCell--, yCell--) {	// Check cells bottom left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell++;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell++;
						continue;
					}
					chessBoard[xCell][yCell].whiteAttackCell++;
					break;
				}
			}
			
			
			for(int queenX = queen.piece_xCoordinate - 1; queenX > -1 ; queenX--) {						// Check cells to left of Rook
				if(chessBoard[queenX][queen.piece_yCoordinate].empty == true) {
					chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell++;
				}
				else {
					if(chessBoard[queenX][queen.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queenX][queen.piece_yCoordinate].piece.getPlayer().equals("black")) {
							chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell++;
							continue;
						}
					}
					chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell++;
					break;
				}
			}
			
			for(int queenX = queen.piece_xCoordinate + 1 ; queenX < 8 ; queenX++) {						// Check cells to right of Rook
				if(chessBoard[queenX][queen.piece_yCoordinate].empty == true) {
					chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell++;
				}
				else {
					if(chessBoard[queenX][queen.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queenX][queen.piece_yCoordinate].piece.getPlayer().equals("black")) {
							chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell++;
							continue;
						}
					}
					chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell++;
					break;
				}
			}
			
			for(int queenY = queen.piece_yCoordinate + 1 ; queenY < 8 ; queenY++) {						// Check all cells above Rook
				if(chessBoard[queen.piece_xCoordinate][queenY].empty == true) {
					chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell++;
				}
				else {
					if(chessBoard[queen.piece_xCoordinate][queenY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queen.piece_xCoordinate][queenY].piece.getPlayer().equals("black")) {
							chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell++;
							continue;
						}
					}
					chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell++;
					break;
				}
			}
			
			for(int queenY = queen.piece_yCoordinate - 1 ; queenY > -1 ; queenY--) {						// Check all cells below Rook
				if(chessBoard[queen.piece_xCoordinate][queenY].empty == true) {
					chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell++;
				}
				else {
					if(chessBoard[queen.piece_xCoordinate][queenY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queen.piece_xCoordinate][queenY].piece.getPlayer().equals("black")) {
							chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell++;
							continue;
						}
					}
					chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell++;
					break;
				}
			}
			
			queen.setAttackPathVisible(true);
			return;
		}
		
		if(currentPlayer.equals("black")) {										// Rook is a Black piece
			
			for(int xCell = queen.piece_xCoordinate - 1,  yCell = queen.piece_yCoordinate + 1 ; xCell > -1 && yCell < 8 ; xCell--, yCell++) {	// Check cells top left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell++;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell++;
						continue;
					}
					chessBoard[xCell][yCell].blackAttackCell++;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate + 1, yCell = queen.piece_yCoordinate + 1 ; xCell < 8 && yCell < 8 ; xCell++, yCell++) {		// Check cells top right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell++;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell++;
						continue;
					}
					chessBoard[xCell][yCell].blackAttackCell++;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate + 1, yCell = queen.piece_yCoordinate - 1 ; xCell < 8 && yCell > -1 ; xCell++, yCell--) {		// Check cells bottom right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell++;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell++;
						continue;
					}
					chessBoard[xCell][yCell].blackAttackCell++;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate - 1 , yCell = queen.piece_yCoordinate - 1 ; xCell > -1 && yCell > -1 ; xCell--, yCell--) {	// Check cells bottom left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell++;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell++;
						continue;
					}
					chessBoard[xCell][yCell].blackAttackCell++;
					break;
				}
			}
			
			for(int queenX = queen.piece_xCoordinate - 1; queenX > -1 ; queenX--) {						// Check cells to left of Rook
				if(chessBoard[queenX][queen.piece_yCoordinate].empty == true) {
					chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell++;
				}
				else {
					if(chessBoard[queenX][queen.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queenX][queen.piece_yCoordinate].piece.getPlayer().equals("white")) {
							chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell++;
							continue;
						}
					}
					chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell++;
					break;
				}
			}
			
			for(int queenX = queen.piece_xCoordinate + 1 ; queenX < 8 ; queenX++) {						// Check cells to right of Rook
				if(chessBoard[queenX][queen.piece_yCoordinate].empty == true) {
					chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell++;
				}
				else {
					if(chessBoard[queenX][queen.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queenX][queen.piece_yCoordinate].piece.getPlayer().equals("white")) {
							chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell++;
							continue;
						}
					}
					chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell++;
					break;
				}
			}
			
			for(int queenY = queen.piece_yCoordinate + 1 ; queenY < 8 ; queenY++) {						// Check all cells above Rook
				if(chessBoard[queen.piece_xCoordinate][queenY].empty == true) {
					chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell++;
				}
				else {
					if(chessBoard[queen.piece_xCoordinate][queenY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queen.piece_xCoordinate][queenY].piece.getPlayer().equals("white")) {
							chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell++;
							continue;
						}
					}
					chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell++;
					break;
				}
			}
			
			for(int queenY = queen.piece_yCoordinate - 1 ; queenY > -1 ; queenY--) {						// Check all cells below Rook
				if(chessBoard[queen.piece_xCoordinate][queenY].empty == true) {
					chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell++;
				}
				else {
					if(chessBoard[queen.piece_xCoordinate][queenY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queen.piece_xCoordinate][queenY].piece.getPlayer().equals("white")) {
							chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell++;
							continue;
						}
					}
					chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell++;
					break;
				}
			}
			
			queen.setAttackPathVisible(true);
			return;
		}
	}

	@Override
	public void decrementAttackPath(BoardCell[][] chessBoard) {
		Queen queen = this;
		
		if(!queen.getAttackPathVisible()) {
			return;
		}
		
		String currentPlayer = queen.getPlayer();
		
		if(currentPlayer.equals("white")) {									// Rook is a White Piece
			
			for(int xCell = queen.piece_xCoordinate - 1,  yCell = queen.piece_yCoordinate + 1 ; xCell > -1 && yCell < 8 ; xCell--, yCell--) {	// Check cells top left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell--;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell--;
						continue;
					}
					chessBoard[xCell][yCell].whiteAttackCell--;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate + 1, yCell = queen.piece_yCoordinate + 1 ; xCell < 8 && yCell < 8 ; xCell--, yCell--) {		// Check cells top right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell--;
				}
				else {

					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell--;
						continue;
					}
					chessBoard[xCell][yCell].whiteAttackCell--;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate + 1, yCell = queen.piece_yCoordinate - 1 ; xCell < 8 && yCell > -1 ; xCell--, yCell--) {		// Check cells bottom right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell--;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell--;
						continue;
					}
					chessBoard[xCell][yCell].whiteAttackCell--;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate - 1 , yCell = queen.piece_yCoordinate - 1 ; xCell > -1 && yCell > -1 ; xCell--, yCell--) {	// Check cells bottom left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].whiteAttackCell--;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("black")) {
						chessBoard[xCell][yCell].whiteAttackCell--;
						continue;
					}
					chessBoard[xCell][yCell].whiteAttackCell--;
					break;
				}
			}
			
			
			for(int queenX = queen.piece_xCoordinate - 1; queenX > -1 ; queenX--) {						// Check cells to left of Rook
				if(chessBoard[queenX][queen.piece_yCoordinate].empty == true) {
					chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell--;
				}
				else {
					if(chessBoard[queenX][queen.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queenX][queen.piece_yCoordinate].piece.getPlayer().equals("black")) {
							chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell--;
							continue;
						}
					}
					chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell--;
					break;
				}
			}
			
			for(int queenX = queen.piece_xCoordinate + 1 ; queenX < 8 ; queenX--) {						// Check cells to right of Rook
				if(chessBoard[queenX][queen.piece_yCoordinate].empty == true) {
					chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell--;
				}
				else {
					if(chessBoard[queenX][queen.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queenX][queen.piece_yCoordinate].piece.getPlayer().equals("black")) {
							chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell--;
							continue;
						}
					}
					chessBoard[queenX][queen.piece_yCoordinate].whiteAttackCell--;
					break;
				}
			}
			
			for(int queenY = queen.piece_yCoordinate + 1 ; queenY < 8 ; queenY--) {						// Check all cells above Rook
				if(chessBoard[queen.piece_xCoordinate][queenY].empty == true) {
					chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell--;
				}
				else {
					if(chessBoard[queen.piece_xCoordinate][queenY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queen.piece_xCoordinate][queenY].piece.getPlayer().equals("black")) {
							chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell--;
							continue;
						}
					}
					chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell--;
					break;
				}
			}
			
			for(int queenY = queen.piece_yCoordinate - 1 ; queenY > -1 ; queenY--) {						// Check all cells below Rook
				if(chessBoard[queen.piece_xCoordinate][queenY].empty == true) {
					chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell--;
				}
				else {
					if(chessBoard[queen.piece_xCoordinate][queenY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queen.piece_xCoordinate][queenY].piece.getPlayer().equals("black")) {
							chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell--;
							continue;
						}
					}
					chessBoard[queen.piece_xCoordinate][queenY].whiteAttackCell--;
					break;
				}
			}
			
			queen.setAttackPathVisible(false);
			return;
		}
		
		if(currentPlayer.equals("black")) {										// Rook is a Black piece
			
			for(int xCell = queen.piece_xCoordinate - 1,  yCell = queen.piece_yCoordinate + 1 ; xCell > -1 && yCell < 8 ; xCell--, yCell--) {	// Check cells top left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell--;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell--;
						continue;
					}
					chessBoard[xCell][yCell].blackAttackCell--;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate + 1, yCell = queen.piece_yCoordinate + 1 ; xCell < 8 && yCell < 8 ; xCell--, yCell--) {		// Check cells top right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell--;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell--;
						continue;
					}
					chessBoard[xCell][yCell].blackAttackCell--;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate + 1, yCell = queen.piece_yCoordinate - 1 ; xCell < 8 && yCell > -1 ; xCell--, yCell--) {		// Check cells bottom right of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell--;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell--;
						continue;
					}
					chessBoard[xCell][yCell].blackAttackCell--;
					break;
				}
			}
			
			for(int xCell = queen.piece_xCoordinate - 1 , yCell = queen.piece_yCoordinate - 1 ; xCell > -1 && yCell > -1 ; xCell--, yCell--) {	// Check cells bottom left of Bishop
				if(chessBoard[xCell][yCell].empty) {
					chessBoard[xCell][yCell].blackAttackCell--;
				}
				else {
					if(chessBoard[xCell][yCell].piece instanceof King && chessBoard[xCell][yCell].piece.getPlayer().equals("white")) {
						chessBoard[xCell][yCell].blackAttackCell--;
						continue;
					}
					chessBoard[xCell][yCell].blackAttackCell--;
					break;
				}
			}
			
			for(int queenX = queen.piece_xCoordinate - 1; queenX > -1 ; queenX--) {						// Check cells to left of Rook
				if(chessBoard[queenX][queen.piece_yCoordinate].empty == true) {
					chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell--;
				}
				else {
					if(chessBoard[queenX][queen.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queenX][queen.piece_yCoordinate].piece.getPlayer().equals("white")) {
							chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell--;
							continue;
						}
					}
					chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell--;
					break;
				}
			}
			
			for(int queenX = queen.piece_xCoordinate + 1 ; queenX < 8 ; queenX--) {						// Check cells to right of Rook
				if(chessBoard[queenX][queen.piece_yCoordinate].empty == true) {
					chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell--;
				}
				else {
					if(chessBoard[queenX][queen.piece_yCoordinate].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queenX][queen.piece_yCoordinate].piece.getPlayer().equals("white")) {
							chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell--;
							continue;
						}
					}
					chessBoard[queenX][queen.piece_yCoordinate].blackAttackCell--;
					break;
				}
			}
			
			for(int queenY = queen.piece_yCoordinate + 1 ; queenY < 8 ; queenY--) {						// Check all cells above Rook
				if(chessBoard[queen.piece_xCoordinate][queenY].empty == true) {
					chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell--;
				}
				else {
					if(chessBoard[queen.piece_xCoordinate][queenY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queen.piece_xCoordinate][queenY].piece.getPlayer().equals("white")) {
							chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell--;
							continue;
						}
					}
					chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell--;
					break;
				}
			}
			
			for(int queenY = queen.piece_yCoordinate - 1 ; queenY > -1 ; queenY--) {						// Check all cells below Rook
				if(chessBoard[queen.piece_xCoordinate][queenY].empty == true) {
					chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell--;
				}
				else {
					if(chessBoard[queen.piece_xCoordinate][queenY].piece instanceof King) {				// Continue attack if enemy King
						if(chessBoard[queen.piece_xCoordinate][queenY].piece.getPlayer().equals("white")) {
							chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell--;
							continue;
						}
					}
					chessBoard[queen.piece_xCoordinate][queenY].blackAttackCell--;
					break;
				}
			}
			
			queen.setAttackPathVisible(false);
			return;
		}
	}
}
