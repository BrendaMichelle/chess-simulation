package chess;

public class Knight extends Piece {
	String bpiece = "bN";
	String wpiece = "wN";
	/*public Knight(String player, String piece ) {
		super(player, piece);
	}*/
	
	public Knight(String player, String pieceName, int xCoordinate, int yCoordinate, BoardCell[][] chessBoard) {
		super(player, pieceName);
		this.piece_xCoordinate = xCoordinate;
		this.piece_yCoordinate = yCoordinate;
		
		incrementAttackPath(chessBoard);
		chessBoard[xCoordinate][yCoordinate].empty = false;
	}
	
	
	@Override
	public boolean eating(BoardCell[][] chessBoard, int new_xCoordinate, int new_yCoordinate)  {
		if(chessBoard[new_xCoordinate][new_yCoordinate].empty == true ) {
			return false; //nothing to eat ( :
		}
		//can only eat pieces on third cell move
		Piece doomedPiece = chessBoard[new_xCoordinate][new_yCoordinate].piece;
		String opposing_pieceOwner = doomedPiece.getPlayer();
		String currentPlayer = getPlayer();
		if(opposing_pieceOwner.equals(currentPlayer)) {
			System.out.println("NOOOO");
			return false; //can't eat one's own piece
		}
		else {
			System.out.println("Poor guy");
			doomedPiece.decrementAttackPath(chessBoard);
			chessBoard[new_xCoordinate][new_yCoordinate].piece = null; //& now we can insert the new player
			chessBoard[new_xCoordinate][new_yCoordinate].empty = true;
			return true;
		}
	
	}
		
	
	@Override
	public boolean moving(Board board, int new_xCoordinate, int new_yCoordinate) {
		Knight knight = this;
		int startX = knight.piece_xCoordinate;
		int startY = knight.piece_yCoordinate;
		
		if(checkValidMove(board.board, new_xCoordinate, new_yCoordinate)) {
			if(eating(board.board, new_xCoordinate, new_yCoordinate)) {
				board.prepareUpdatingBoard(startX, startY, new_xCoordinate, new_yCoordinate);
				knight.decrementAttackPath(board.board);
				board.board[startX][startY].piece = null;
				board.board[startX][startY].empty = true;
				board.board[new_xCoordinate][new_yCoordinate].piece = knight; 
				board.board[new_xCoordinate][new_yCoordinate].empty = false;
				knight.setMoved(true);
				knight.piece_xCoordinate = new_xCoordinate;
				knight.piece_yCoordinate = new_yCoordinate;
				knight.incrementAttackPath(board.board);
				board.updateBoardAttackPaths(startX, startY, new_xCoordinate, new_yCoordinate);
				return true;
			}
		}
		else {
			board.prepareUpdatingBoard(startX, startY, new_xCoordinate, new_yCoordinate);
			knight.decrementAttackPath(board.board);
			board.board[startX][startY].piece = null;
			board.board[startX][startY].empty = true;
			board.board[new_xCoordinate][new_yCoordinate].piece = knight; 
			board.board[new_xCoordinate][new_yCoordinate].empty = false;
			knight.setMoved(true);
			knight.piece_xCoordinate = new_xCoordinate;
			knight.piece_yCoordinate = new_yCoordinate;
			knight.incrementAttackPath(board.board);
			board.updateBoardAttackPaths(startX, startY, new_xCoordinate, new_yCoordinate);
			return true;
		}
		return false;
	}
	
	@Override
	public boolean checkValidMove(BoardCell[][] chessBoard, int new_xCoordinate, int new_yCoordinate) {
		/*moves are only taken in L shapes that consist of 3 hops; 2 hops horizontally or vertically followed
		* by one hop in the opposite direction */
		int rangex = this.piece_xCoordinate - new_xCoordinate;
		int rangey = this.piece_yCoordinate - new_yCoordinate;
		int totalMoves = Math.abs(rangex) + Math.abs(rangey);
		System.out.println(new_xCoordinate + " " + new_yCoordinate);
		System.out.println(rangex + " " + rangey);
		System.out.println("Total moves: "+ totalMoves);
		if(totalMoves == 3 && (Math.abs(rangex) == 2 || Math.abs(rangey) == 2)) { 
			
			return true;
		}
		return false;
	}
		
	@Override
	public void incrementAttackPath(BoardCell[][] chessBoard) {
		Knight knight = this;
		
		int knighX = knight.piece_xCoordinate;
		int knightY = knight.piece_yCoordinate;
		
		
		
	}
	@Override
	public void decrementAttackPath(BoardCell[][] chessBoard) {
		// TODO Auto-generated method stub
		
	}
}
