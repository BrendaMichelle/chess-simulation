package chess;
import java.util.Scanner;
/**
*<h1>Chess class: location of Main </h1>
*
*<b>Details:</b>The main is located here.  Within the main,
*the handling of input and taking turns between the black and white
*players is determined. 
 * 
 * 
*@author BrendaRios
*@since   2018-02-23
*/
public class Chess {
	


	public static int getx(char letter) {//this determines the x coordinate or depth of item in our board array
		int x = letter - '0' - 49;
		return x;
	}
	public static int gety(char number_string) { //this determines the y coordinate or height of item in our board array [height][depth]
		int y = number_string - '0';
		
		switch(y) {
			case 8:
				y = y - 8;
				break;
			case 7:
				y = y - 6;
				break;
			case 6:
				y = y - 4;
				break;
			case 5:
				y = y - 2;
				break;
			case 4:
				y = y - 0;
				break;
			case 3:
				y = y + 2;
				break;
			case 2:
				y = y + 4;
				break;
			case 1:
				y = y + 6;
				break;
			default:
				return y;
						
		}
		return y;
			
	}
	

	public static void main(String[] args) {
		Board board; 
		board = new Board();
		board.initialize_board();
		board.set_up_board();
		//board.printAttackPaths();
		board.print_board();
		System.out.println();
		String destination_cell;
		String starting_cell;
		Scanner keyboard = new Scanner(System.in).useDelimiter(" ");
		String input;
		String extra = null;
		int size;
		boolean valid_move = false;
		int start_x;
		int dest_x;
		int start_y;
		int dest_y;
		int white_king_y = 7;
		int white_king_x = 4;
		int black_king_y = 0;
		int black_king_x = 4;
		boolean move;
		
		while ( true) {
				
			/*
			 * *
			 * 
			 * white's turn
			 * 
			 */
			System.out.print("White's move: ");
			while(!valid_move) {
				input = keyboard.nextLine();
				size = input.length();
				starting_cell = input.substring(0, 2);
		
				if(size == 6 && input.substring(0, 6).equals("resign")) {
					System.out.println("Black wins");
					keyboard.close();
					return;
				}
				if(size == 5 && input.substring(0, 4).equals("draw")) { 
					keyboard.close();
					return; 
				}
				
				if(size ==  7 && (input.substring(6, 7).equals("N") || input.substring(6, 7).equals("B") || input.substring(6, 7).equals("p") ||input.substring(6, 7).equals("Q") || input.substring(6, 7).equals("R") )){
					extra = input.substring(6, 7);	
				}

				destination_cell = input.substring(3, 5);
				start_x = getx(starting_cell.charAt(0));
				dest_x = getx(destination_cell.charAt(0));
				start_y = gety(starting_cell.charAt(1));
				dest_y = gety( destination_cell.charAt(1)); 
		
				if(board.board[start_y][start_x].empty == false && board.board[start_y][start_x].piece.getPlayer().equals("white")) {
					valid_move = board.board[start_y][start_x].piece.checkValidMove(board.board, dest_y, dest_x);
				}
				if(valid_move) {
					if(move = board.board[start_y][start_x].piece.moving(board, dest_y, dest_x)) { //move the piece
					
						if(move == true && (board.board[dest_y][dest_x].piece instanceof King )) {//update if white king position if he moved
							white_king_y = dest_y;
							white_king_x = dest_x;
						}
						//check for incheck and checkmate
						if(board.blackKingInCheck(board.board,  (King) board.board[black_king_y][black_king_x].piece) == true && board.checkMateBlackKing(board.board,  (King) board.board[black_king_y][black_king_x].piece) == true) {
							System.out.println("White wins");
							keyboard.close();
							return;
						}
					
						if((board.board[dest_y][dest_x].piece instanceof Pawn) && (dest_y == 7 || dest_y == 0)) {//checks qualifications for promotion
							String player = board.board[dest_y][dest_x].piece.getPlayer();
							String piece_rep =  board.board[dest_y][dest_x].piece.piece_name;
							board.board[dest_y][dest_x].piece = null; 
						
							Pawn p = new Pawn (player,piece_rep, dest_y, dest_x, board.board);
							board.board[dest_y][dest_x].piece = p;
							p.promotion(board.board, dest_y, dest_x, extra);
						}
						break;
					}
					else {
						valid_move = false;
						System.out.println("Illegal move, try again");
						System.out.println("White's move: ");
					}
				}
				else {
					System.out.println("Illegal move, try again");
					System.out.println("White's move: ");
				}
			}
			
			board.print_board();
			valid_move = false;
			
			/*
			 * black's turn
			 */
			System.out.print("Black's move: ");
			while(!valid_move) {
				input = keyboard.nextLine();
				size = input.length();
				starting_cell = input.substring(0, 2);
					
				if(size == 6 && input.substring(0, 6).equals("resign")) {
					System.out.println("White wins");
					keyboard.close();
					return;

				}
				if(size == 5 && input.substring(0, 4).equals("draw")) { 
					keyboard.close();
					return; 
				}

			if(size ==  7 && (input.substring(6, 7).equals("N") || input.substring(6, 7).equals("B") || input.substring(6, 7).equals("p") ||input.substring(6, 7).equals("Q") || input.substring(6, 7).equals("R") )){
				extra = input.substring(6, 7);	
				}
		
				destination_cell = input.substring(3, 5);
				start_x = getx(starting_cell.charAt(0));
				dest_x = getx(destination_cell.charAt(0));
				start_y = gety(starting_cell.charAt(1));
				dest_y = gety( destination_cell.charAt(1)); 
					

			destination_cell = input.substring(3, 5);
				start_x = getx(starting_cell.charAt(0));
				dest_x = getx(destination_cell.charAt(0));
				start_y = gety(starting_cell.charAt(1));
				dest_y = gety( destination_cell.charAt(1)); 
			
				
				
				if(board.board[start_y][start_x].empty == false && board.board[start_y][start_x].piece.getPlayer().equals("black")) {
				valid_move = board.board[start_y][start_x].piece.checkValidMove(board.board, dest_y, dest_x);
				}
				if(valid_move) {
					move = board.board[start_y][start_x].piece.moving(board, dest_y, dest_x); //move the piece
					
					if(move == true && (board.board[dest_y][dest_x].piece instanceof King )) {//update if white king position if he moved
						black_king_y = dest_y;
						black_king_x = dest_x;
					}
					//check for incheck and checkmate
					if(board.blackKingInCheck(board.board,  (King) board.board[white_king_y][white_king_x].piece) == true && board.checkMateBlackKing(board.board,  (King) board.board[white_king_y][white_king_x].piece) == true) {
						System.out.println("Black wins");
						keyboard.close();
						return;
					}
					
					if((board.board[dest_y][dest_x].piece instanceof Pawn) && (dest_y == 7 || dest_y == 0)) {
						String player = board.board[dest_y][dest_x].piece.getPlayer();
						String piece_rep =  board.board[dest_y][dest_x].piece.piece_name;
						 board.board[dest_y][dest_x].piece = null; 
						
						Pawn p = new Pawn (player,piece_rep, dest_y, dest_x, board.board);
						board.board[dest_y][dest_x].piece = p;
						p.promotion(board.board, dest_y, dest_x, extra);
					}
					break;
				}
				else {
					System.out.println("Illegal move, try again");
					System.out.println("Black's move: ");
				}
			}
			//board.printAttackPaths();
			board.print_board();
			valid_move = false;

			}
	}
}